<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="Codifica__o/Bibliotecas/Dominio/Titulo.hpp" line="44" id="noExplicitConstructor" severity="style" msg="Class &apos;Titulo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Nome.hpp" line="51" id="noExplicitConstructor" severity="style" msg="Class &apos;Nome&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Data.hpp" line="64" id="noExplicitConstructor" severity="style" msg="Class &apos;Data&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Codigo.hpp" line="40" id="noExplicitConstructor" severity="style" msg="Class &apos;Codigo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/GeneroLiterario.hpp" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;GeneroLiterario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Livro.hpp" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;Livro&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Livro.hpp" line="46" id="noExplicitConstructor" severity="style" msg="Class &apos;Livro&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Livro.hpp" line="52" id="noExplicitConstructor" severity="style" msg="Class &apos;Livro&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Livro.hpp" line="58" id="noExplicitConstructor" severity="style" msg="Class &apos;Livro&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Apelido.hpp" line="40" id="noExplicitConstructor" severity="style" msg="Class &apos;Apelido&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Senha.hpp" line="42" id="noExplicitConstructor" severity="style" msg="Class &apos;Senha&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Texto.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;Texto&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resenha.hpp" line="32" id="noExplicitConstructor" severity="style" msg="Class &apos;Resenha&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resenha.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;Resenha&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Dominio/Telefone.hpp" line="48" id="noExplicitConstructor" severity="style" msg="Class &apos;Telefone&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Usuario.hpp" line="36" id="noExplicitConstructor" severity="style" msg="Class &apos;Usuario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Usuario.hpp" line="42" id="noExplicitConstructor" severity="style" msg="Class &apos;Usuario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Usuario.hpp" line="48" id="noExplicitConstructor" severity="style" msg="Class &apos;Usuario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Usuario.hpp" line="54" id="noExplicitConstructor" severity="style" msg="Class &apos;Usuario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="89" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="96" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="124" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="131" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="138" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Resultado.hpp" line="145" id="noExplicitConstructor" severity="style" msg="Class &apos;Resultado&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Entidade/Log.hpp" line="45" id="noExplicitConstructor" severity="style" msg="Class &apos;Log&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdConLivro.hpp" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdConLivro&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdConUsuario.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdConUsuario&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdCriarResenha.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdCriarResenha&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdIncluir.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdIncluir&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdProcurar.hpp" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdProcurar&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdRemover.hpp" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdRemover&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlEst/ACmdSinTroca.hpp" line="40" id="noExplicitConstructor" severity="style" msg="Class &apos;ACmdSinTroca&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="16" id="noConstructor" severity="style" msg="The class &apos;LivroTst&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Resenha_Tst.hpp" line="16" id="noConstructor" severity="style" msg="The class &apos;ResenhaTst&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Usuario_Tst.hpp" line="16" id="noConstructor" severity="style" msg="The class &apos;UsuarioTst&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Login_Tst.hpp" line="16" id="noConstructor" severity="style" msg="The class &apos;LoginTst&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="Codifica__o/Bibliotecas_Tst/AtivaTeste.hpp" line="47" id="memleak" severity="error" msg="Memory leak: sobTeste" />
    <error file="Codifica__o/Bibliotecas_Tst/AtivaTeste.hpp" line="76" id="memleak" severity="error" msg="Memory leak: sobTeste" />
    <error file="Codifica__o/Bibliotecas_Tst/AtivaTeste.hpp" line="38" id="uninitvar" severity="error" msg="Uninitialized variable: sobTeste" />
    <error file="Codifica__o/Bibliotecas_Tst/AtivaTeste.hpp" line="40" id="uninitvar" severity="error" msg="Uninitialized variable: sobTeste" />
    <error file="Codifica__o/Bibliotecas/Apresentacao/Aplicacao/Aplicacao.hpp" line="34" id="unsafeClassCanLeak" severity="style" msg="The class &apos;Aplicacao&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;Aplicacao::func&apos;. This can for instance be fixed by adding proper cleanup in the destructor." />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlAut/AAut.hpp" line="21" id="unsafeClassCanLeak" severity="style" msg="The class &apos;AAut&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;AAut::login&apos;. This can for instance be fixed by adding proper cleanup in the destructor." />
    <error file="Codifica__o/Fontes/Apresentacao/CtrlEst/ACmdIncluir.cpp" line="38" id="unusedVariable" severity="style" msg="Unused variable: buffer2" />
    <error file="Codifica__o/Bibliotecas/Apresentacao/CtrlUsu/AUsu.hpp" line="21" id="unsafeClassCanLeak" severity="style" msg="The class &apos;AUsu&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;AUsu::usuario&apos;. This can for instance be fixed by adding proper cleanup in the destructor." />
    <error file="Codifica__o/Fontes/Apresentacao/TUI.cpp" line="41" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Bibliotecas/Dominio/Apelido.hpp" line="26" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Apelido::validarTamanho&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Apelido.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Apelido::validarLetras&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Codigo.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Codigo::validarTamanho&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Codigo.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Codigo::validarNumerico&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Senha.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Senha::validarTamanho&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Senha.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Senha::validarAlfabetico&apos;" />
    <error file="Codifica__o/Bibliotecas/Dominio/Senha.hpp" line="29" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Senha::validarDuplicata&apos;" />
    <error file="Codifica__o/Fontes/Entidade/Livro.cpp" line="34" id="unusedScopedObject" severity="style" msg="Instance of &apos;Livro&apos; object is destroyed immediately." />
    <error file="Codifica__o/Fontes/Entidade/Log.cpp" line="18" id="unusedScopedObject" severity="style" msg="Instance of &apos;Log&apos; object is destroyed immediately." />
    <error file="Codifica__o/Fontes/Utilidades/Manipulacao.cpp" line="101" id="stlIfStrFind" severity="style" msg="Either inefficient or wrong usage of string::find(). string::compare() will be faster if string::find&apos;s result is compared with 0, because it will not scan the whole string. If your intention is to check that there are no findings in the string, you should compare with std::string::npos." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="209" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="211" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="220" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="222" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="231" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="233" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="242" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="244" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="253" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="255" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="264" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="266" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes_Tst/Dominio_Tst/DominioBase_Tst.cpp" line="20" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes_Tst/Dominio_Tst/DominioBase_Tst.cpp" line="23" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes_Tst/Dominio_Tst/DominioBase_Tst.cpp" line="34" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Fontes_Tst/Dominio_Tst/DominioBase_Tst.cpp" line="35" id="catchExceptionByValue" severity="style" msg="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++." />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LivroTst::validarCodigo&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LivroTst::validarData&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="29" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LivroTst::validarGenero&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="30" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LivroTst::validarAutor&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Livro_Tst.hpp" line="31" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LivroTst::validarTitulo&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Login_Tst.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LoginTst::validarApelido&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Login_Tst.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;LoginTst::validarSenha&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Resenha_Tst.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ResenhaTst::validarTitulo&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Resenha_Tst.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;ResenhaTst::validarTexto&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Usuario_Tst.hpp" line="27" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;UsuarioTst::validarNome&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Usuario_Tst.hpp" line="28" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;UsuarioTst::validarApelido&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Usuario_Tst.hpp" line="29" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;UsuarioTst::validarTelefone&apos;" />
    <error file="Codifica__o/Bibliotecas_Tst/Entidade_Tst/Usuario_Tst.hpp" line="30" id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;UsuarioTst::validarSenha&apos;" />
    <error file="Codifica__o/Fontes/Utilidades/Manipulacao.cpp" line="107" id="unusedFunction" severity="style" msg="The function &apos;aguardarResp&apos; is never used." />
    <error file="Codifica__o/Fontes/Utilidades/Manipulacao.cpp" line="66" id="unusedFunction" severity="style" msg="The function &apos;ePar&apos; is never used." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="288" id="unusedFunction" severity="style" msg="The function &apos;expect_NotNull&apos; is never used." />
    <error file="Codifica__o/Fontes/Utilidades/TesteUnitario.cpp" line="284" id="unusedFunction" severity="style" msg="The function &apos;expect_Null&apos; is never used." />
    <error file="Codifica__o/Bibliotecas_Tst/AtivaTeste.hpp" line="35" id="unusedFunction" severity="style" msg="The function &apos;fullTeste&apos; is never used." />
    <error file="Codifica__o/Bibliotecas/Dominio/Data.hpp" line="92" id="unusedFunction" severity="style" msg="The function &apos;getAno&apos; is never used." />
    <error file="Codifica__o/Bibliotecas/Dominio/Data.hpp" line="90" id="unusedFunction" severity="style" msg="The function &apos;getDia&apos; is never used." />
    <error file="Codifica__o/Bibliotecas/Dominio/Data.hpp" line="91" id="unusedFunction" severity="style" msg="The function &apos;getMes&apos; is never used." />
    <error file="Codifica__o/Fontes/Utilidades/Manipulacao.cpp" line="10" id="unusedFunction" severity="style" msg="The function &apos;minuscula&apos; is never used." />
    <error id="missingIncludeSystem" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
